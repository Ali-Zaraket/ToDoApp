[{"C:\\Users\\User\\Desktop\\django_web_apps\\todolist\\src\\index.js":"1","C:\\Users\\User\\Desktop\\django_web_apps\\todolist\\src\\App.js":"2","C:\\Users\\User\\Desktop\\django_web_apps\\todolist\\src\\homepage.js":"3"},{"size":197,"mtime":1617268972704,"results":"4","hashOfConfig":"5"},{"size":224,"mtime":1612373973671,"results":"6","hashOfConfig":"5"},{"size":6190,"mtime":1617266892440,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"lisvxy",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"C:\\Users\\User\\Desktop\\django_web_apps\\todolist\\src\\index.js",[],["16","17"],"C:\\Users\\User\\Desktop\\django_web_apps\\todolist\\src\\App.js",[],"C:\\Users\\User\\Desktop\\django_web_apps\\todolist\\src\\homepage.js",["18","19"],"import React, { Component } from 'react';\r\n\r\n\r\nexport default class HomePage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            list: [],\r\n            task: {\r\n                id: null,\r\n                description: '',\r\n                done: false,\r\n            },\r\n        };\r\n\r\n        this.handleAddButtonClick = this.handleAddButtonClick.bind(this);\r\n        this.fetchTasks = this.fetchTasks.bind(this);\r\n        this.renderTask = this.renderTask.bind(this);\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleDeleteButton = this.handleDeleteButton.bind(this);\r\n        this.handleCheckBoxChange = this.handleCheckBoxChange.bind(this);\r\n        this.renderDeleteAll = this.renderDeleteAll.bind(this);\r\n        this.getCompleted = this.getCompleted.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        this.fetchTasks();\r\n    }\r\n    getCompleted(list){\r\n        var completed = 0;\r\n        list.map((task) => {\r\n            if(task.done){\r\n                completed++;\r\n            }\r\n        })\r\n        return completed;\r\n    }\r\n\r\n    fetchTasks(){\r\n        var url = \"http://localhost:8000/api/tasks\";\r\n\r\n        fetch(url).then(response => response.json())\r\n        .then((data) => {\r\n            this.setState({\r\n                list: data,\r\n            });\r\n        });\r\n    }\r\n\r\n    handleAddButtonClick() {\r\n        var url = \"http://localhost:8000/api/create-task\";\r\n        var requestOptions = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n                description: this.state.task.description,\r\n            })\r\n        };\r\n\r\n        fetch(url, requestOptions)\r\n        .then((response) => response.json())\r\n        .then(() => {\r\n            this.fetchTasks();\r\n            this.setState({\r\n                task: {\r\n                    id: null,\r\n                    description: '',\r\n                    done: false,\r\n                },\r\n            });\r\n        });\r\n    }\r\n\r\n    handleCheckBoxChange(e, task){\r\n        var checked = e.target.checked;\r\n\r\n        var url = \"http://localhost:8000/api/done-task\";\r\n        var requestOptions = {\r\n            method: 'PATCH',\r\n            headers: { \"Content-Type\": \"application/json\"},\r\n            body: JSON.stringify({\r\n                pk: task.id,\r\n                done: checked,\r\n            })\r\n        };\r\n        fetch(url, requestOptions)\r\n        .then((response) => response.json())\r\n        .then(() => {\r\n            this.fetchTasks();\r\n        });\r\n    }\r\n\r\n    renderTask(task, index, done=null) {\r\n        if(done) {\r\n            return(\r\n                <div key={index} className=\"task-wrapper flex-wrapper\" id=\"slide\">\r\n                    <div className=\"checkbox\">\r\n                        <input className=\"form-check-input\" value=\"\" checked={task.done} onChange={(e) => this.handleCheckBoxChange(e, task)} type=\"checkbox\" id=\"checkboxNoLabel\" value=\"\" aria-label=\"...\" />\r\n                    </div>\r\n                    <div style={{flex:7}}>\r\n                        <span>{task.description}</span>\r\n                    </div>\r\n                    <div style={{flex:1}}>\r\n                        <button className=\"btn btn-danger\" onClick={() => this.handleDeleteButton(task)}>delete</button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    handleInputChange(e){\r\n        var description = e.target.value;\r\n        this.setState({\r\n            task: {\r\n                ...this.state.task,\r\n                description: description,\r\n            }\r\n        });\r\n    }\r\n\r\n    handleDeleteButton(task){\r\n        var url = \"http://localhost:8000/api/delete-task?pk=\" + task.id;\r\n        var requestOptions = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n                pk: task.id,\r\n            })\r\n        };\r\n        fetch(url, requestOptions)\r\n        .then((response) => response.json())\r\n        .then(() => this.fetchTasks());\r\n    }\r\n\r\n    renderDeleteAll(){\r\n        return(\r\n            <div className=\"pt-5 pb-4 row\" id=\"slide\">\r\n                <button type=\"submit\" className=\"btn btn-outline-danger\" onClick={() => {\r\n                    this.state.list.map((task) => this.handleDeleteButton(task))\r\n                }}>\r\n                    Delete All List\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"pt-5\">\r\n                    <legend className=\"display-1 text-info\" align=\"center\">TO DO</legend>\r\n                </div>\r\n                <div className=\"row pt-4\">\r\n                    <div className=\"col-9\">\r\n                        <input type=\"text\" onChange={this.handleInputChange} value={this.state.task.description} className=\"form-control\" placeholder=\"Add a task..\" required/>\r\n                    </div>\r\n                    <div className=\"col-1\">\r\n                        <button type=\"submit\" className=\"btn btn-info\" onClick={this.handleAddButtonClick}>\r\n                            Add\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                \r\n                <div className=\"list-box border-bottom border-secondary border-2 pb-5\">\r\n                    {this.state.list.map((task, index, done) => this.renderTask(task, index, done=!task.done))}\r\n                </div>\r\n                {this.state.list.length > 0 ?\r\n                    <legend className=\"text-secondary display-6\" align=\"center\">DONE ({this.getCompleted(this.state.list)})</legend>\r\n                    : null\r\n                }\r\n                <div className=\"list-box\">\r\n                    {this.state.list.map((task, index, done) => this.renderTask(task, index, done=task.done))}\r\n                </div>\r\n                {this.state.list.length > 1 ? this.renderDeleteAll() : null}\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n",{"ruleId":"20","replacedBy":"21"},{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","severity":1,"message":"25","line":30,"column":25,"nodeType":"26","messageId":"27","endLine":30,"endColumn":27},{"ruleId":"28","severity":1,"message":"29","line":99,"column":180,"nodeType":"30","endLine":99,"endColumn":188},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation"]